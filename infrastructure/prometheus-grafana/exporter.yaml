apiVersion: v1
kind: Namespace
metadata:
  name: monitoring
---
# kube-state-metrics
apiVersion: apps/v1
kind: Deployment
metadata:
  name: kube-state-metrics
  namespace: monitoring
  labels: { app: kube-state-metrics }
spec:
  replicas: 1
  selector:
    matchLabels: { app: kube-state-metrics }
  template:
    metadata:
      labels: { app: kube-state-metrics }
    spec:
      serviceAccountName: kube-state-metrics
      containers:
        - name: kube-state-metrics
          image: registry.k8s.io/kube-state-metrics/kube-state-metrics:v2.12.0
          ports:
            - name: http-metrics
              containerPort: 8080
          args:
            - --port=8080
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: kube-state-metrics
  namespace: monitoring
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: kube-state-metrics
rules:
  - apiGroups: [""]
    resources:
      - nodes
      - pods
      - services
      - resourcequotas
      - replicationcontrollers
      - limitranges
      - persistentvolumeclaims
      - persistentvolumes
      - namespaces
      - endpoints
    verbs: ["list","watch"]
  - apiGroups: ["apps"]
    resources:
      - daemonsets
      - deployments
      - replicasets
      - statefulsets
    verbs: ["list","watch"]
  - apiGroups: ["batch"]
    resources:
      - cronjobs
      - jobs
    verbs: ["list","watch"]
  - apiGroups: ["autoscaling"]
    resources: ["horizontalpodautoscalers"]
    verbs: ["list","watch"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: kube-state-metrics
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: kube-state-metrics
subjects:
  - kind: ServiceAccount
    name: kube-state-metrics
    namespace: monitoring
---
apiVersion: v1
kind: Service
metadata:
  name: kube-state-metrics
  namespace: monitoring
  labels: { app: kube-state-metrics }
spec:
  selector: { app: kube-state-metrics }
  ports:
    - name: http
      port: 8080
      targetPort: http-metrics
---
# node-exporter (daemonset)
apiVersion: apps/v1
kind: DaemonSet
metadata:
  name: node-exporter
  namespace: monitoring
  labels: { app: node-exporter }
spec:
  selector:
    matchLabels: { app: node-exporter }
  template:
    metadata:
      labels: { app: node-exporter }
    spec:
      hostPID: true
      hostNetwork: true
      tolerations:
        - operator: "Exists"
      containers:
        - name: node-exporter
          image: quay.io/prometheus/node-exporter:v1.8.1
          args:
            - --path.rootfs=/
          ports:
            - name: metrics
              containerPort: 9100
              hostPort: 9100
          securityContext:
            runAsNonRoot: true
            runAsUser: 65534
            allowPrivilegeEscalation: false
---
apiVersion: v1
kind: Service
metadata:
  name: node-exporter
  namespace: monitoring
  labels: { app: node-exporter }
spec:
  clusterIP: None
  selector: { app: node-exporter }
  ports:
    - name: http
      port: 9100
      targetPort: metrics
